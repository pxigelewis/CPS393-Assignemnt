#!/bin/bash

declare -a wholecard=()
while read line;
do
    wholecard+=($line)
done < ./$1 #this uses a filename in the commandline in the same directory

# ( "${arr[@]:index:length}" "item to add" "${arr[@]:index:length}" )

if [ ${#wholecard[@]} != 26 ]
then
    echo "the length is 26 items"
    #add in the error message here and then add in the prompt to make a randomly generated card. 
fi

seed=${wholecard[0]}

row1=( "${wholecard[@]:1:5}" )

row2=( "${wholecard[@]:6:5}" )

row3=( "${wholecard[@]:11:5}" )

row4=( "${wholecard[@]:16:5}" )

row5=( "${wholecard[@]:21:5}" )

echo "${row1[@]}"
echo "${row2[@]}"
echo "${row3[@]}"
echo "${row4[@]}"
echo "${row5[@]}"

#first checks if the calledNums array is empty
#then adds randomly generated numbers to it
#then checks if random number was previously generated
#if so generates a new one

declare -a calledNums=()
ran=`expr $RANDOM \% 75 + 1`

if [ -z "$calledNums"]; then
        calledNums+=("$ran")
fi

if [[ "$ran" =~ "$[calledNums[*]}" ]]
        then
        ran=`expr $RANDOM \% 75 + 1`
fi

#marks the card if generated number is in the card
#similar to Dan's code with slight changes

for i in $wholecard
do
        if [[ "${wholecard[$i]}" =~ "$ran" ]]
        then
            ${wholecard[$i]}="$wholecard[$i]}""m"
        fi


#this is the card marker section of the code. We have a pseudovariable
#callednumber will be whatever the $RANDOM number is. 

for i in $wholecard
do
    if [ $calledNum == ${wholecard[$i]} ]
    then
        ${wholecard[$i]}="${wholecard[$i]}""m"
    fi

#these will be the error checks, the first one here is checking if there are 26 items in the array. 
if [ ${#wholecard[@]} == 26 ];
then
    echo "the length is 26 items"
fi
                                                              75,1          Bot
